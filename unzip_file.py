# import os
# import zipfile
# import re
# import sys

# def unzip_files(input_folder, output_folder):
#     os.makedirs(output_folder, exist_ok=True)

#     for file_name in os.listdir(input_folder):
#         file_path = os.path.join(input_folder, file_name)

#         if file_name.endswith(".zip") and os.path.isfile(file_path):
    
#             match = re.match(r"^(mask_)?(\d+)\.zip$", file_name)
#             if match:
#                 folder_name = match.group(0).replace(".zip", "")  # T·∫°o t√™n th∆∞ m·ª•c gi·ªëng t√™n file
#                 dest_folder = os.path.join(output_folder, folder_name)
#                 os.makedirs(dest_folder, exist_ok=True)

#                 try:
#                     with zipfile.ZipFile(file_path, 'r') as zip_ref:
#                         zip_ref.extractall(dest_folder)
#                         print(f"ƒê√£ gi·∫£i n√©n: {file_name} ‚Üí {dest_folder}")
#                 except zipfile.BadZipFile:
#                     print(f"L·ªói: {file_name}")

#     print("done")

# if __name__ == "__main__":
#     if len(sys.argv) != 3:
#         print("Sai c√∫ ph√°p! C√°ch d√πng:")
#         print("python unzip_all.py <input_folder> <output_folder>")
#         sys.exit(1)

#     input_dir = sys.argv[1]
#     output_dir = sys.argv[2]

#     unzip_files(input_dir, output_dir)

# import os
# import zipfile
# import sys

# def unzip_all_files(input_folder, output_folder):
#     """ Gi·∫£i n√©n t·∫•t c·∫£ file ZIP trong th∆∞ m·ª•c ƒë·∫ßu v√†o v√†o th∆∞ m·ª•c ƒë·∫ßu ra """
#     if not os.path.isdir(input_folder):
#         print(f"‚ùå L·ªói: {input_folder} kh√¥ng ph·∫£i l√† th∆∞ m·ª•c h·ª£p l·ªá!")
#         return

#     os.makedirs(output_folder, exist_ok=True)

#     # Duy·ªát qua t·∫•t c·∫£ c√°c file trong th∆∞ m·ª•c ƒë·∫ßu v√†o
#     for file_name in os.listdir(input_folder):
#         file_path = os.path.join(input_folder, file_name)

#         if file_name.endswith(".zip") and os.path.isfile(file_path):
#             dest_folder = os.path.join(output_folder, file_name.replace(".zip", ""))
#             os.makedirs(dest_folder, exist_ok=True)

#             try:
#                 with zipfile.ZipFile(file_path, 'r') as zip_ref:
#                     zip_ref.extractall(dest_folder)
#                     print(f"‚úÖ ƒê√£ gi·∫£i n√©n: {file_name} ‚Üí {dest_folder}")
#             except zipfile.BadZipFile:
#                 print(f"‚ùå L·ªói: {file_name} kh√¥ng ph·∫£i file ZIP h·ª£p l·ªá!")

#     print("üéâ Ho√†n th√†nh gi·∫£i n√©n t·∫•t c·∫£ file ZIP!")

# if __name__ == "__main__":
#     if len(sys.argv) != 3:
#         print("‚ùå Sai c√∫ ph√°p! C√°ch d√πng:")
#         print("üëâ python unzip_all.py <input_folder> <output_folder>")
#         sys.exit(1)

#     input_dir = sys.argv[1]
#     output_dir = sys.argv[2]

#     unzip_all_files(input_dir, output_dir)

import os
import zipfile
import sys

def unzip_all_files_recursive(input_folder, output_folder):
    """ Gi·∫£i n√©n t·∫•t c·∫£ file ZIP trong m·ªçi th∆∞ m·ª•c con c·ªßa input_folder v√†o output_folder """
    if not os.path.isdir(input_folder):
        print(f"‚ùå L·ªói: {input_folder} kh√¥ng ph·∫£i l√† th∆∞ m·ª•c h·ª£p l·ªá!")
        return

    os.makedirs(output_folder, exist_ok=True)

    for root, _, files in os.walk(input_folder):
        for file_name in files:
            if file_name.endswith(".zip"):
                zip_path = os.path.join(root, file_name)

                # T·∫°o ƒë∆∞·ªùng d·∫´n ƒë√≠ch (gi·ªØ c·∫•u tr√∫c folder g·ªëc t∆∞∆°ng ƒë·ªëi t·ª´ input_folder)
                rel_path = os.path.relpath(root, input_folder)
                dest_folder = os.path.join(output_folder, rel_path, file_name.replace(".zip", ""))
                os.makedirs(dest_folder, exist_ok=True)

                try:
                    with zipfile.ZipFile(zip_path, 'r') as zip_ref:
                        zip_ref.extractall(dest_folder)
                        print(f"‚úÖ ƒê√£ gi·∫£i n√©n: {zip_path} ‚Üí {dest_folder}")
                except zipfile.BadZipFile:
                    print(f"‚ùå L·ªói: {zip_path} kh√¥ng ph·∫£i file ZIP h·ª£p l·ªá!")

    print("üéâ Ho√†n th√†nh gi·∫£i n√©n t·∫•t c·∫£ file ZIP!")

if __name__ == "__main__":
    if len(sys.argv) != 3:
        print("‚ùå Sai c√∫ ph√°p! C√°ch d√πng:")
        print("üëâ python unzip_all.py <input_folder> <output_folder>")
        sys.exit(1)

    input_dir = sys.argv[1]
    output_dir = sys.argv[2]

    unzip_all_files_recursive(input_dir, output_dir)



# import os
# import shutil
# import sys

# def merge_images(source_dir, target_dir):
#     os.makedirs(target_dir, exist_ok=True)

#     count = 0
#     for root, dirs, files in os.walk(source_dir):
#         for file in files:
#             if file.lower().endswith(('.png', '.jpg', '.jpeg', '.bmp')):
#                 src_path = os.path.join(root, file)
#                 dst_path = os.path.join(target_dir, file)

#                 # ƒê·ªïi t√™n n·∫øu tr√πng
#                 if os.path.exists(dst_path):
#                     base, ext = os.path.splitext(file)
#                     dst_path = os.path.join(target_dir, f"{base}_{count}{ext}")

#                 shutil.copy2(src_path, dst_path)
#                 count += 1

#     print(f"‚úÖ ƒê√£ g·ªôp {count} ·∫£nh v√†o {target_dir}")

# if __name__ == "__main__":
#     if len(sys.argv) != 3:
#         print("C√°ch d√πng: python merge_images.py <th∆∞_m·ª•c_ngu·ªìn> <th∆∞_m·ª•c_ƒë√≠ch>")
#     else:
#         source_dir = sys.argv[1]
#         target_dir = sys.argv[2]
#         merge_images(source_dir, target_dir)


# import os
# import sys
# import pandas as pd

# def merge_csv_files(source_dir, output_file):
#     all_dfs = []
#     csv_files = [f for f in os.listdir(source_dir) if f.endswith(".csv")]

#     if not csv_files:
#         print("‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y file CSV n√†o trong th∆∞ m·ª•c.")
#         return

#     for csv_file in sorted(csv_files):
#         csv_path = os.path.join(source_dir, csv_file)
#         print(f"üîÑ ƒêang x·ª≠ l√Ω: {csv_file}")
#         try:
#             df = pd.read_csv(csv_path)
#             all_dfs.append(df)
#         except Exception as e:
#             print(f"‚ùå L·ªói khi ƒë·ªçc {csv_file}: {e}")

#     if all_dfs:
#         merged_df = pd.concat(all_dfs, ignore_index=True)
#         merged_df.to_csv(output_file, index=False)
#         print(f"‚úÖ ƒê√£ g·ªôp xong {len(csv_files)} file ‚Üí {output_file}")
#     else:
#         print("‚ùå Kh√¥ng c√≥ d·ªØ li·ªáu ƒë·ªÉ g·ªôp.")

# if __name__ == "__main__":
#     if len(sys.argv) != 3:
#         print("C√°ch d√πng: python merge_csv.py <th∆∞_m·ª•c_ch·ª©a_csv> <file_csv_ƒë·∫ßu_ra>")
#     else:
#         source_dir = sys.argv[1]
#         output_file = sys.argv[2]
#         merge_csv_files(source_dir, output_file)
